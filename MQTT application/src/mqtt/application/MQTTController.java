/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mqtt.application;

import java.awt.Color;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import org.fusesource.mqtt.client.BlockingConnection;
import org.fusesource.mqtt.client.MQTT;
import org.fusesource.mqtt.client.QoS;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Bomie
 */
public class MQTTController extends javax.swing.JFrame {

    /**
     * This contains a list of all the timed temperature controls in it
     */
    public JSONArray controls = new JSONArray();
    /**
     * This is the connection used to publish messages
     */
    BlockingConnection connection;

    /**
     * Creates new form MQTTController
     */
    public MQTTController() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SubmitTempButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tempValue = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        ControlsList = new javax.swing.JList<>();
        timeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tempValue1 = new javax.swing.JSpinner();
        controlSaveBtn = new javax.swing.JButton();
        DeleteControl = new javax.swing.JButton();
        newControlBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        SubmitTempButton.setText("Change the temprature");
        SubmitTempButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitTempButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Temprature:");

        ControlsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ControlsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ControlsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ControlsList);

        timeField.setText("01:00");
        timeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                timeFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("Time :");

        jLabel3.setText("Temperature:");

        controlSaveBtn.setText("Create");
        controlSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlSaveBtnActionPerformed(evt);
            }
        });

        DeleteControl.setText("Delete");
        DeleteControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteControlActionPerformed(evt);
            }
        });

        newControlBtn.setText("New");
        newControlBtn.setEnabled(false);
        newControlBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newControlBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newControlBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DeleteControl))
                    .addComponent(SubmitTempButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tempValue, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tempValue1))
                    .addComponent(controlSaveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tempValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SubmitTempButton)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tempValue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(controlSaveBtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newControlBtn)
                    .addComponent(DeleteControl))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This connects to the mqtt for publishing
     */
    public void initialize() {
        try {
            MQTT mqtt = new MQTT();
            mqtt.setHost("tcp://PLEASE INSERT YOUR OWN MQTT SERVER HERE");
            connection = mqtt.blockingConnection();
            connection.connect();
        } catch (URISyntaxException ex) {
            Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * submits the temperature to the MQTT server as json
     */
    private void SubmitTempButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitTempButtonActionPerformed
        try {
            String jsonReturn = "{\"temp\":\"" + tempValue.getValue() + "\"}";
            connection.publish("TemperatureControl", jsonReturn.getBytes(), QoS.AT_MOST_ONCE, true);
        } catch (Exception ex) {
            Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SubmitTempButtonActionPerformed

    /**
     * Upon pressing a key we want to warn the user if they're inputting bad
     * vars
     */
    private void timeFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeFieldKeyPressed
        validateTimeField();
    }//GEN-LAST:event_timeFieldKeyPressed

    /**
     * upon trying to submit a control we have to check the times correct, if it
     * is publish the entire jsonarray again to
     *
     * @param evt
     */
    private void controlSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlSaveBtnActionPerformed

        Pattern m = Pattern.compile("^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$");
        if (!m.matcher(timeField.getText()).matches()) {
            JOptionPane.showMessageDialog(rootPane, "You cannot submit a non-valid time");
        } else {
            try {
                String jsonReturn = "{\"temp\":" + tempValue1.getValue() + ",\"time\":\"" + timeField.getText() + "\"}";
                if (ControlsList.getSelectedIndex() != -1) {//if we're modifying a control
                    controls.remove(ControlsList.getSelectedIndex());
                }
                controls.put(new JSONObject(jsonReturn));
                connection.publish("TemperatureSettings", controls.toString().getBytes(), QoS.AT_LEAST_ONCE, true);
                ControlsList.setSelectedIndex(-1);
                timeField.setText("01:00");
                tempValue1.setValue(0);
                updateList();
            } catch (URISyntaxException ex) {
                Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_controlSaveBtnActionPerformed

    /**
     * if we select an item in the list we want to populate the fields required
     *
     * @param evt
     */
    private void ControlsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ControlsListValueChanged
        try {
            if (ControlsList.getSelectedIndex() != -1) {
                newControlBtn.setEnabled(true);
                controlSaveBtn.setText("Save");
                JSONObject val = new JSONObject(controls.get(ControlsList.getSelectedIndex()).toString());
                timeField.setText(val.get("time") + "");
                tempValue1.setValue(val.get("temp"));
            } else {
                timeField.setText("01:00");
                tempValue1.setValue(0);
            }
        } catch (JSONException ex) {
            Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ControlsListValueChanged

    /**
     * this deletes the specified temperature control from the system
     */
    private void DeleteControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteControlActionPerformed
        try {
            controls.remove(ControlsList.getSelectedIndex());
            connection.publish("TemperatureSettings", controls.toString().getBytes(), QoS.AT_LEAST_ONCE, true);
            ControlsList.setSelectedIndex(-1);
            timeField.setText("01:00");
            tempValue1.setValue(0);
            updateList();
        } catch (URISyntaxException ex) {
            Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeleteControlActionPerformed

    /**
     * Upon releasing a key we want to warn the user if they're inputting bad
     * vars
     */
    private void timeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeFieldKeyReleased
        validateTimeField();
    }//GEN-LAST:event_timeFieldKeyReleased

    private void newControlBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newControlBtnActionPerformed
        newControlBtn.setEnabled(false);
        controlSaveBtn.setText("Create");
        timeField.setText("01:00");
        tempValue1.setValue(0);
        ControlsList.clearSelection();
    }//GEN-LAST:event_newControlBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Thread threadedListener = new Thread(new MQTTApplication(this));
        threadedListener.start();
        initialize();    }//GEN-LAST:event_formWindowOpened
    /**
     * validate the numbers entered on the time field
     */
    private void validateTimeField() {
        Pattern m = Pattern.compile("^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"); 
        if (!m.matcher(timeField.getText()).matches()) {
            timeField.setBackground(Color.red);
        } else {
            timeField.setBackground(Color.white);
        }
    }

    /**
     * this populates the json in human readable format to allow the users to
     * modify
     */
    public void updateList() {
        List<String> listData = new ArrayList<String>();
        for (int i = 0; i < controls.length(); i++) {
            try {
                JSONObject temperature = new JSONObject(controls.get(i).toString());
                String temp = "Temp : " + temperature.get("temp") + " Time : " + temperature.get("time");
                listData.add(temp);
            } catch (JSONException ex) {
                Logger.getLogger(MQTTController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        ControlsList.setListData(listData.toArray(new String[0]));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MQTTController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MQTTController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MQTTController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MQTTController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MQTTController().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ControlsList;
    private javax.swing.JButton DeleteControl;
    private javax.swing.JButton SubmitTempButton;
    private javax.swing.JButton controlSaveBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newControlBtn;
    protected javax.swing.JSpinner tempValue;
    protected javax.swing.JSpinner tempValue1;
    private javax.swing.JTextField timeField;
    // End of variables declaration//GEN-END:variables
}
